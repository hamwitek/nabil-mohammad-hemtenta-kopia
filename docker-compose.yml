# version: "3.8"

services:
  db:
    image: postgres:15
    container_name: postgres_db
    env_file: .env
    environment:
      POSTGRES_DB: ${DATABASE}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  app:
    image: nabelb/hemtenta-api:latest
    container_name: fastapi_app
    env_file: .env
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DATABASE: ${DATABASE}
      PASSWORD: ${PASSWORD}
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - app_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - app_network
    depends_on:
      - app
      # Optionally also depends on node_exporter if you want to ensure it starts first

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    # If you want to gather host-level metrics, you might do:
    # network_mode: host
    # privileged: true
    # but that's more advanced. If you keep it simple, just let it run on its own port:
    ports:
      - "9100:9100"
    networks:
      - app_network
    # This can gather container-level metrics but not full host metrics without extra config

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app_network
    # Optional: persist Grafana data in a volume
    volumes:
      - grafana_data:/var/lib/grafana

networks:
  app_network:

volumes:
  postgres_data:
  grafana_data: